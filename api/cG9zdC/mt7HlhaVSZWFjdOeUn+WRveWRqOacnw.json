{"title":"深入react生命周期","date":"2019-05-07T06:49:19.563Z","slug":"深入React生命周期","tags":["react"],"categories":["web"],"updated":"2019-05-14T07:47:30.553Z","content":"<p>仅仅是生成一个React元素是不会触发生命周期函数调用的</p>\n<h3 id=\"componentWillMount\"><a href=\"#componentWillMount\" class=\"headerlink\" title=\"componentWillMount()\"></a>componentWillMount()</h3><p>在第一次render()前被调用<br>state props已经配置完毕<br>状态初始化处理</p>\n<h3 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render()\"></a>render()</h3><p>不要在render中改变组件的状态 访问原生DOM元素</p>\n<h3 id=\"componentDidMount\"><a href=\"#componentDidMount\" class=\"headerlink\" title=\"componentDidMount()\"></a>componentDidMount()</h3><p>可访问原生dom</p>\n<p>调用顺序 从子组件-&gt;父组件</p>\n<h3 id=\"更新阶段\"><a href=\"#更新阶段\" class=\"headerlink\" title=\"更新阶段\"></a>更新阶段</h3><h4 id=\"触发情况\"><a href=\"#触发情况\" class=\"headerlink\" title=\"触发情况\"></a>触发情况</h4><ul>\n<li>更改props：父组件传递</li>\n<li>更改state: setState()(异步)</li>\n<li>forceUpdate</li>\n</ul>\n<h4 id=\"componentWillReceiveProps-nextProps\"><a href=\"#componentWillReceiveProps-nextProps\" class=\"headerlink\" title=\"componentWillReceiveProps(nextProps)\"></a>componentWillReceiveProps(nextProps)</h4><p>nextProps是更改以后的prop值 但是Prop值不一定和上次的完全不一样</p>\n<h4 id=\"shouldComponentUpdate\"><a href=\"#shouldComponentUpdate\" class=\"headerlink\" title=\"shouldComponentUpdate()\"></a>shouldComponentUpdate()</h4><p>决定是否继续使用当前周期</p>\n<p>true：继续使用</p>\n<p>false：结束</p>\n<p>可以根据自己的业务逻辑判断props和state有没有发生变化而决定是否继续下去 可以做到一定的性能优化</p>\n<h4 id=\"componentWillUpdate\"><a href=\"#componentWillUpdate\" class=\"headerlink\" title=\"componentWillUpdate()\"></a>componentWillUpdate()</h4><p>这个阶段不可以使用setState() 否则陷入死循环<br>可以访问到旧的props和state和新的nextProps和nextState</p>\n<h4 id=\"componentDidUpdate\"><a href=\"#componentDidUpdate\" class=\"headerlink\" title=\"componentDidUpdate()\"></a>componentDidUpdate()</h4><p>和Mount阶段类似，会传入preState和preProps两个状态</p>\n<h3 id=\"死亡阶段\"><a href=\"#死亡阶段\" class=\"headerlink\" title=\"死亡阶段\"></a>死亡阶段</h3><h4 id=\"componentWillUnmount\"><a href=\"#componentWillUnmount\" class=\"headerlink\" title=\"componentWillUnmount()\"></a>componentWillUnmount()</h4><p>组件需要从dom中移除的时候 取消已经发送的网络请求 移除dom上的监听</p>\n","prev":{"title":"js数据结构之树的基本总结","slug":"js数据结构之数"},"next":{"title":"TypeScript知识点总结思维导图（持续更踩坑点）","slug":"TypeScript知识点总结思维导图（持续更踩坑点）"},"link":"http://yoursite.com/post/深入React生命周期/","copyright":{"custom":"飞过人间的无常 才懂爱才是宝藏"}}